def javaSubprojects = [
]

def groovySubprojects = [
        ':domain',
        ':business',
        ':gateway',
        ':gateway-netty',
        ':server'
]

(javaSubprojects + groovySubprojects).each { projectPath ->
    project(projectPath) {

        apply plugin: 'java'
        apply plugin: 'checkstyle'
        apply plugin: 'pmd'
        apply plugin: 'findbugs'

        sourceCompatibility = JavaVersion.VERSION_1_7

        dependencies {
            testCompile 'junit:junit:4.12'
        }

        checkstyle {
            //toolVersion = "6.2"
            configFile = rootProject.file 'config/checkstyle/checkstyle.xml'
        }

        pmd {
            ruleSets = ["java-basic", "java-braces"/*, "java-junit"*/]
        }

    }
}

groovySubprojects.each { projectPath ->
    project(projectPath) {

        apply plugin: 'groovy'

        dependencies {
            compile 'org.codehaus.groovy:groovy:2.4.5:indy'
        }

    }
}


allprojects {
    group = PROJECTS_GROUP
    version = new Version(VERSION_NAME)
    status = version.status

    repositories {
        maven {
            url "http://maven.oschina.net/content/groups/public/"
        }
        jcenter()
        mavenCentral()
    }

    tasks.findAll{ task -> [JavaCompile, Javadoc, GroovyCompile/*, Groovydoc*/].any{it.isInstance(task)} }.each{ task ->
        task.options.encoding = 'UTF-8'
    }

    tasks.withType(GroovyCompile) { task ->
        task.groovyOptions.with{
            configurationScript = file "$rootDir/config/groovy/compiler-config.groovy"
            optimizationOptions.indy = true
        }
    }

}


import java.text.SimpleDateFormat
class Version {
    String originalVersion
    String versionName
    int versionCode
    String status
    Date buildTime
    Version(String versionValue) {
        if (versionValue =~ /\d{2,}/) {
            throw new GradleException("versionValue(${versionValue}) contains number more than 9.")
        }
        buildTime = new Date()
        originalVersion = versionValue
        String originalVersionCodeString;
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            originalVersionCodeString = originalVersion.substring(0, originalVersion.length() - '-SNAPSHOT'.length())
            versionName = originalVersionCodeString + '-' + getTimestamp()
        } else {
            status = 'release'
            versionName = versionValue
            originalVersionCodeString = versionValue
        }
        versionCode = originalVersionCodeString.replace('.', '').toInteger();
    }
    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }
    String toString() {
        versionName
    }
}
